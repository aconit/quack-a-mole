@model int

@{
    Layout = null;
}

<!DOCTYPE html>

<html lang="en">
<head>
    <meta name="viewport" content="width=device-width" />
    <meta charset="utf-8">
    <title>Quack-a-mole</title>
    <link rel="shortcut icon" href="~/Content/images/favicon.ico" type="image/x-icon">
    <link href="https://fonts.googleapis.com/css?family=IBM+Plex+Sans|Monofett" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/css/materialize.min.css">
    <style>
        div {
            cursor: url(@Url.Content("~/Content/images/target.png")), auto;
        }

        .gameover
        {
          padding:10px;
          background-color: rgba(2,119,189,0.8);
          border-radius: 3px;
          color:#F9FFBC
        }
    </style>
</head>
<body style="font-family: 'Monofett', cursive;">
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script src="@Url.Content("~/Content/js/three.min.js")"></script>
    <script src="@Url.Content("~/Content/js/Detector.js")"></script>
    <script src="@Url.Content("~/Content/js/OrbitControls.js")"></script>
    <script src="@Url.Content("~/Content/js/OBJLoader.js")"></script>
    <script src="@Url.Content("~/Content/js/DDSLoader.js")"></script>
    <script src="@Url.Content("~/Content/js/MTLLoader.js")"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/js/materialize.min.js"></script>

    <!----Shaders---->

    <script id="moleshader" type="x-shader/x-vertex">
        varying vec2 vUv;
        void main()
        {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
        }
    </script>
    <script id="molefragmentshader" type="x-shader/x-fragment">
        uniform sampler2D baseTexture;
        uniform float baseSpeed;
        uniform sampler2D noiseTexture;
        uniform float noiseScale;
        uniform float alpha;
        uniform float time;

        varying vec2 vUv;
        void main()
        {
        vec2 uvTimeShift = vUv + vec2( -0.7, 1.5 ) * time * baseSpeed;
        vec4 noiseGeneratorTimeShift = texture2D( noiseTexture, uvTimeShift );
        vec2 uvNoiseTimeShift = vUv + noiseScale * vec2( noiseGeneratorTimeShift.r, noiseGeneratorTimeShift.b );
        vec4 baseColor = texture2D( baseTexture, uvNoiseTimeShift );

        baseColor.a = alpha;
        gl_FragColor = baseColor;
        }
    </script>


    <script type="x-shader/x-vertex" id="vertexshader">
        attribute float size;
        varying vec3 vColor;
        void main() {
        vColor = color;
        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
        gl_PointSize = size * ( 300.0 / -mvPosition.z );
        gl_Position = projectionMatrix * mvPosition;
        }
    </script>



    <script type="x-shader/x-fragment" id="fragmentshader">
        uniform sampler2D texture;
        varying vec3 vColor;
        void main() {
        gl_FragColor = vec4( vColor, 1.0 );
        gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );
        }
    </script>

    <!-- ------------------------------------------------------------ -->
    <div id="ThreeJS" style="position: absolute; left:0px; top:0px"></div>

    <div class="row" style="position: absolute; left:0px; top:0px;width:100%;color:black;padding:0px 10px 0px 10px;">
        <h3 id="divTime" style="float:left;">TIME LEFT: 0</h3>
        <h3 id="divScore" style="float:right;">SCORE: 0</h3>
    </div>

    <div class="row" id="gameoverlayer" style="display:none;text-align:center;margin:auto; padding:0;position:absolute;  top: 0; right: 0; bottom: 0; left: 0;">

        <div class="valign-wrapper" style="height:100%;">
            <div class="col l4 s12"></div>
            <div class="col l4 s12">
                <div class="gameover">
                    <div class="row">
                        <div class="col s12" style="text-align:center">
                            <h3 id="gameovertext"></h3>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col l6 s12">
                            <a class="waves-effect btn-large " href="@Url.Action("Index", Model)" style="background-color:#F9FFBC; font-family:'IBM Plex Sans', sans-serif;color:#0277bd;font-weight:bold; width:100%;">Replay</a>
                        </div>
                        <div class="col l6 s12">
                            <a class="waves-effect btn-large center" href="@Url.Action("Index", "Home")" style="background-color:#F9FFBC; font-family:'IBM Plex Sans', sans-serif;color:#0277bd;font-weight:bold; width:100%;">GO to menu</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col l4 s12"></div>

        </div>
    </div>


    <script>
        //window.onerror = function (message, source, lineno, colno, error) {
        //    alert(message);
        //}

        // standard global variables
        var container, scene, camera, renderer, controls;
        var hammersound, painsound, wonsound, lostsound;
        var gameClock = new THREE.Clock();
        var gameDuration = 60;

        var stayInSuperpositionSec = 1;
        var stayInDestroyedPositionSec = 20;
        var particleuniforms;
        var shaderMaterial;
        var particles = 30;
        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();
        var moleStartY = -2;
        var moleSpeed = 0.07;
        var score = 0;
        var doingRequest = false;

		@{if(Model==2)
		{
			<text>
				var currPoints = 0;
 				var holeColors = ["#4CFF00", "#D67FFF", "#FF7F7F", "#7FC9FF"];
			</text>
			}
		}
        var mouseDownClock = new THREE.Clock();

        var HolesArray = [];
        var MolesArray = [];
        var KilledMolesArray = [];
        var ShowMoleValuesArray = [];

        class Hole {
            constructor(mesh, id, x, z, radius) {
                this.mesh = mesh;

                this.id = id;
                this.x = x;
                this.z = z;
                this.radius = radius;
                this.particlegeometry = new THREE.BufferGeometry();
                this.positions = [];
                this.colors = [];
                this.sizes = [];
                this.color = new THREE.Color();
                this.sp = false;

                this.particleSystem;
                this.clock = new THREE.Clock();
                createMole(x, z);
                this.showMole = false;
                this.moleGoesUp = true;
                this.superpos = true;
                this.hit = false;

                this.hitmole;

            }

            set superpos(supvalue) {

                if (supvalue == true) {
                    for (i = 0; i < KilledMolesArray.length; i++) {
                        if (KilledMolesArray[i].moleID == this.id) {

                            KilledMolesArray[i].shown = false;
                            KilledMolesArray[i].position.x = 0;
                            KilledMolesArray[i].position.y = moleStartY;
                            KilledMolesArray[i].position.z = 0;
                        }

                    }

                    this.particlegeometry = new THREE.BufferGeometry();
                    scene.remove(this.particleSystem);
                    this.sp = supvalue;
                    this.showMole = false;
					@{if(Model==2)
						{
							<text>
						   		this.mesh.material = new THREE.MeshBasicMaterial({ color: 0xA54200 });
			                    this.entID = null;
							</text>
						}
					}


                    //set particles
                    for (var i = 0; i < particles; i++) {
                        this.positions.push(this.x + (Math.random() * 2 - 1) * this.radius);
                        this.positions.push((Math.random() * 2 - 1) * this.radius / 4);
                        this.positions.push(this.z + (Math.random() * 2 - 1) * this.radius);
                        this.color.setHSL(i / particles, 1.0, 0.5);
                        this.colors.push(this.color.r, this.color.g, this.color.b);
                        this.sizes.push(1);
                    }

                    this.particlegeometry.addAttribute('position', new THREE.Float32BufferAttribute(this.positions, 3));
                    this.particlegeometry.addAttribute('color', new THREE.Float32BufferAttribute(this.colors, 3));
                    this.particlegeometry.addAttribute('size', new THREE.Float32BufferAttribute(this.sizes, 1).setDynamic(true));
                    this.particleSystem = new THREE.Points(this.particlegeometry, shaderMaterial);
                    scene.add(this.particleSystem);
                }
                else {
                    if (this.clock.running == false) {
                        this.clock.start();
                    }

                }

            }

            get superpos() {
                return this.sp;
            }

            removeParticles() {
                if (doingRequest == false) {
                    if (ShowMoleValuesArray == null || ShowMoleValuesArray.length == 0) {
                            var currMole = this;
                            doingRequest = true;
							@{
if(Model==1)
{
	<text>
$.post("@Url.Action("GetValues")", { typeOfCode: 1} ,function (labels) {
                                ShowMoleValuesArray = labels.split("");
                                currMole.setMole();
                                doingRequest = false;

                            })
                            .fail(function (er, er2, er3, er4) {
                               // alert("error");
                            })
	</text>

}
else
{
	<text>
$.post("@Url.Action("GetValues")", { typeOfCode: 2 },function (labels) {
                            var tempArray = labels.split("");

                            ShowMoleValuesArray = new Array();
                            ShowMoleValuesArray.push([tempArray[0], tempArray[1]]);
                            ShowMoleValuesArray.push([tempArray[3], tempArray[4]]);
                            ShowMoleValuesArray.push([tempArray[2]]);
                            currMole.setMole();
                            doingRequest = false;
                                //ShowMoleValuesArray = labels.split("");
                                //currMole.setMole();
                                //doingRequest = false;

                            })
                            .fail(function (er, er2, er3, er4) {
                               // alert("error");
                            })

	</text>


}


}

                        }
                        else {
                            this.setMole();
                        }
                 }

            }

            setMole() {
                if (doingRequest == false) {
                    this.particlegeometry = new THREE.BufferGeometry();
                    scene.remove(this.particleSystem);
                    this.clock.stop();
                    this.clock = new THREE.Clock();
                    this.sp = false;

	@{
	if(Model == 1)
{
	<text>
  		this.showMole = ShowMoleValuesArray[0];
        ShowMoleValuesArray.shift();

</text>

}
else
{
<text>
if (ShowMoleValuesArray[0].length == 1) {
                        this.showMole = ShowMoleValuesArray[0];
                        ShowMoleValuesArray.shift();
                    }
                    else {
                        //second from the pair
                        if (ShowMoleValuesArray[0][0] > 100) {
                            this.showMole = ShowMoleValuesArray[0][1];
                            this.entID = ShowMoleValuesArray[0][0] - 100;

                            HolesArray[this.entID - 1].entID = this.id;
                            this.mesh.material = HolesArray[this.entID - 1].mesh.material;
                            ShowMoleValuesArray.shift();

                        }
                        else {
                            //first from the pair
                            this.showMole = ShowMoleValuesArray[0][0];
                            var currmaterial = new THREE.MeshBasicMaterial({ color: holeColors[0] });
                            holeColors.push(holeColors[0]);
                            holeColors.shift();

                            this.mesh.material = currmaterial;

                            ShowMoleValuesArray[0][0] = this.id +100;

                        }
                    }
</text>


}
}


                }
            }

        }



        function createMole(x, z) {

            var onProgress = function (xhr) {

                if (xhr.lengthComputable) {
                    var percentComplete = xhr.loaded / xhr.total * 100;
                    console.log(Math.round(percentComplete, 2) + '% downloaded');
                }
            };

            var onError = function (xhr) { };

            THREE.Loader.Handlers.add(/\.dds$/i, new THREE.DDSLoader());



            new THREE.MTLLoader()
                .setPath('@Url.Content("~/Content/Models/squirrel/")')
                .load('squirrel.mtl', function (materials) {

                    materials.preload();

                    new THREE.OBJLoader()
                        .setMaterials(materials)
                        .setPath('@Url.Content("~/Content/Models/squirrel/")')
                        .load('mole.obj', function (object) {
                            object.position.x = x;
                            object.position.y = moleStartY;
                            object.position.z = z;
                            object.moleID = MolesArray.length + 1;
                            object.lookAt(camera.position);
                            MolesArray.push(object);
                            scene.add(object);

                        }, onProgress, onError);

                });
        }



        init();
        animate();

        function updateScore() {
			@{
		if(Model==1)
{
	<text>
score++;
	</text>
}
else
{
<text>
score += currPoints;

</text>

}
}

            document.getElementById('divScore').innerHTML = "SCORE: " + score;
            painsound.play();
        }


        function onMouseDown(event) {
            mouseDownClock.start();

        }


        function getCenterPoint(mesh) {
            var geometry = mesh.geometry;
            geometry.computeBoundingBox();
            center = geometry.boundingBox.getCenter();
            mesh.localToWorld(center);
            return center;
        }


        function onMouseUp(x, y, isMouse) {
            if ((isMouse && mouseDownClock.getElapsedTime() < 0.2) || isMouse==false) {

                mouse.x = x;
                mouse.y = y;

                raycaster.setFromCamera(mouse, camera);

                // calculate objects intersecting the picking ray

                var shownMoles;

                var intersects = raycaster.intersectObjects(MolesArray, true);

                var update = false;

                for (var i = 0; i < intersects.length; i++) {
                    try {

                        var currMoleID = intersects[i].object.parent.moleID;
                        if (HolesArray[currMoleID - 1].showMole == true) {

                        HolesArray[currMoleID - 1].showMole = false;
                        HolesArray[currMoleID - 1].moleGoesUp = true;
                        HolesArray[currMoleID - 1].hit = true;
                        @{
	                        if(Model == 1)
                        {
	                        <text>
  					        for (k = 0; k < KilledMolesArray.length; k++) {
                                    if (KilledMolesArray[k].shown == false) {
                                        KilledMolesArray[k].moleID = currMoleID;
                                        KilledMolesArray[k].shown = true;
                                        KilledMolesArray[k].clock.start();
                                        KilledMolesArray[k].position.x = intersects[i].object.parent.position.x;
                                        KilledMolesArray[k].position.y = intersects[i].object.parent.position.y;
                                        KilledMolesArray[k].position.z = intersects[i].object.parent.position.z;
                                        KilledMolesArray[k].lookAt(camera.position);
                                        KilledMolesArray[k].customUniforms.alpha.value = 1.0;
                                        break;
                                    }

                                }

                                MolesArray[currMoleID - 1].position.y = moleStartY;
	                    </text>
                    }
                    else
                    {
                        <text>
                        var currEntMoleID = HolesArray[currMoleID - 1].entID;

                        if (currEntMoleID != null) {
                            HolesArray[currEntMoleID - 1].showMole = false;
                            HolesArray[currEntMoleID - 1].moleGoesUp = true;
                            HolesArray[currEntMoleID - 1].hit = true;
                        }

                        if (currEntMoleID != null) {
                            for (k = 0; k < KilledMolesArray.length-1; k++) {

                                if (KilledMolesArray[k].shown == false) {
                                    KilledMolesArray[k].moleID = currMoleID;
                                    KilledMolesArray[k].shown = true;
                                    KilledMolesArray[k].clock.start();
                                    KilledMolesArray[k].position.x = intersects[i].object.parent.position.x;
                                    KilledMolesArray[k].position.y = intersects[i].object.parent.position.y;
                                    KilledMolesArray[k].position.z = intersects[i].object.parent.position.z;
                                    KilledMolesArray[k].lookAt(camera.position);
                                    KilledMolesArray[k].customUniforms.alpha.value = 1.0;


                                    KilledMolesArray[k+1].moleID = currEntMoleID;
                                    KilledMolesArray[k+1].shown = true;
                                    KilledMolesArray[k+1].clock.start();
                                    KilledMolesArray[k+1].position.x = MolesArray[currEntMoleID - 1].position.x;
                                    KilledMolesArray[k+1].position.y = MolesArray[currEntMoleID - 1].position.y;
                                    KilledMolesArray[k+1].position.z = MolesArray[currEntMoleID - 1].position.z;
                                    KilledMolesArray[k+1].lookAt(camera.position);
                                    KilledMolesArray[k+1].customUniforms.alpha.value = 1.0;

                                    break;
                                }

                            }
                            MolesArray[currMoleID - 1].position.y = moleStartY;
                            MolesArray[currEntMoleID - 1].position.y = moleStartY;
                            currPoints = 2;
                        }
                        else {
                            for (k = 0; k < KilledMolesArray.length; k++) {

                                if (KilledMolesArray[k].shown == false) {
                                    KilledMolesArray[k].moleID = currMoleID;
                                    KilledMolesArray[k].shown = true;
                                    KilledMolesArray[k].clock.start();
                                    KilledMolesArray[k].position.x = intersects[i].object.parent.position.x;
                                    KilledMolesArray[k].position.y = intersects[i].object.parent.position.y;
                                    KilledMolesArray[k].position.z = intersects[i].object.parent.position.z;
                                    KilledMolesArray[k].lookAt(camera.position);
                                    KilledMolesArray[k].customUniforms.alpha.value = 1.0;
                                    break;
                                }

                            }
                            MolesArray[currMoleID - 1].position.y = moleStartY;
                            currPoints = 1;
                        }

	                        </text>
                        }

                        }

                        update = true;
                        }

                    }
                    catch (ex) { }
                }

                if (update == true) {
                    updateScore();
                }
                else {
                    hammersound.play();
                }

                mouseDownClock.stop();
                mouseDownClock = new THREE.Clock();
            }


        }

        function GetShowMoleValue() {
            var result = Math.floor((Math.random() * 10) + 1);
            if (result < 6) {
                return true;
            }
            else {
                return false;
            }

        }

        function init() {
            // SCENE
            scene = new THREE.Scene();
            // CAMERA
            var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
            var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
            camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);


            // create an AudioListener and add it to the camera
            var listener = new THREE.AudioListener();
            camera.add(listener);

            // create a global audio source for teh hammer
            hammersound = new THREE.Audio(listener);
            var audioLoader = new THREE.AudioLoader();
            audioLoader.load('@Url.Content("~/Content/sounds/quack.ogg")', function (buffer) {
                hammersound.setBuffer(buffer);
                hammersound.setVolume(0.5);
            });

            // create a global audio source for pain
            painsound = new THREE.Audio(listener);
            var audioLoaderPain = new THREE.AudioLoader();
            audioLoaderPain.load('@Url.Content("~/Content/sounds/pain.ogg")', function (buffer) {
                painsound.setBuffer(buffer);
                painsound.setVolume(0.5);
            });

            // create a global audio source for won
            wonsound = new THREE.Audio(listener);
            var audioLoaderWon = new THREE.AudioLoader();
            audioLoaderWon.load('@Url.Content("~/Content/sounds/won.ogg")', function (buffer) {
                wonsound.setBuffer(buffer);
                wonsound.setVolume(0.5);
            });

            // create a global audio source for lost
            lostsound = new THREE.Audio(listener);
            var audioLoaderLost = new THREE.AudioLoader();
            audioLoaderLost.load('@Url.Content("~/Content/sounds/lost.ogg")', function (buffer) {
                lostsound.setBuffer(buffer);
                lostsound.setVolume(0.5);
            });



            camera.position.set(0, 2, 0);

            camera.lookAt(scene.position);
            scene.add(camera);
            // RENDERER
            if (Detector.webgl)
                renderer = new THREE.WebGLRenderer({ antialias: true });
            else
                renderer = new THREE.CanvasRenderer();

            renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
            container = document.getElementById('ThreeJS');
            container.appendChild(renderer.domElement);

            //shaders for superposition
            particleuniforms = {
                texture: { value: new THREE.TextureLoader().load("https://threejs.org/examples/textures/sprites/spark1.png") }
            };


            shaderMaterial = new THREE.ShaderMaterial({
                uniforms: particleuniforms,
                vertexShader: document.getElementById('vertexshader').textContent,
                fragmentShader: document.getElementById('fragmentshader').textContent,
                blending: THREE.AdditiveBlending,
                depthTest: false,
                transparent: true,
                vertexColors: true
            });


            // CONTROLS
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableZoom = false;
            controls.enablePan = false;
            controls.target = new THREE.Vector3(0, 2, 0);


            // LIGHT
            var light = new THREE.PointLight(0xffffff);
            light.position.set(0, 500, 0);
            scene.add(light);

            createKilledMoles();

            drawSkyBox();
            drawHoles();

            gameClock.start();

            window.addEventListener('mousedown', onMouseDown, false);
        }

        $(document).ready(function () {
            $("#ThreeJS").on('touchstart', function (e) {
                var touch = e.touches[0];
                var x = (touch.clientX / window.innerWidth) * 2 - 1;
                var y = - (touch.clientY / window.innerHeight) * 2 + 1;
                onMouseUp(x, y, false);
            });
            $("#ThreeJS").on('click', function (e) {
                //alert(e.clientX + " " + e.clientY);
                var x = (e.clientX / window.innerWidth) * 2 - 1;
                var y = - (e.clientY / window.innerHeight) * 2 + 1;
                onMouseUp(x, y, true);
            });
        });

        function createKilledMoles() {

            var onError = function (xhr) { };

            var onProgress = function (xhr) {

                if (xhr.lengthComputable) {
                    var percentComplete = xhr.loaded / xhr.total * 100;
                    console.log(Math.round(percentComplete, 2) + '% downloaded');
                }
            };

            var noiseTexture = new THREE.ImageUtils.loadTexture('@Url.Content("~/Content/images/cloud.png")');
            noiseTexture.wrapS = noiseTexture.wrapT = THREE.RepeatWrapping;

            var lavaTexture = new THREE.ImageUtils.loadTexture('@Url.Content("~/Content/images/lava.jpg")');
            lavaTexture.wrapS = lavaTexture.wrapT = THREE.RepeatWrapping;

            var material = new THREE.MeshBasicMaterial({ color: 0xA54200 });

            // use "this." to create global object
            this.customUniforms = {
                baseTexture: { type: "t", value: lavaTexture },
                baseSpeed: { type: "f", value: 0.05 },
                noiseTexture: { type: "t", value: noiseTexture },
                noiseScale: { type: "f", value: 0.5337 },
                alpha: { type: "f", value: 1.0 },
                time: { type: "f", value: 1.0 }
            };

            for (i = 0; i < 3; i++) {

                new THREE.OBJLoader()
                    .setPath('@Url.Content("~/Content/Models/squirrel/")')
                    .load('mole.obj', function (object) {
                        object.position.y = moleStartY;
                        object.customUniforms = {
                            baseTexture: { type: "t", value: lavaTexture },
                            baseSpeed: { type: "f", value: 0.05 },
                            noiseTexture: { type: "t", value: noiseTexture },
                            noiseScale: { type: "f", value: 0.5337 },
                            alpha: { type: "f", value: 1.0 },
                            time: { type: "f", value: 1.0 }
                        };
                        object.shown = false;

                        object.clock = new THREE.Clock();

                        object.customMaterial = new THREE.ShaderMaterial(
                            {
                                uniforms: object.customUniforms,
                                vertexShader: document.getElementById('moleshader').textContent,
                                fragmentShader: document.getElementById('molefragmentshader').textContent,
                                transparent: true
                            });
                        object.customMaterial.side = THREE.DoubleSide;

                        object.traverse(function (child) {
                            if (child instanceof THREE.Mesh) {
                                child.material = object.customMaterial;
                            }

                        });

                        KilledMolesArray.push(object);
                        scene.add(object);


                    }, onProgress, onError);

            }


        }


        function drawSkyBox() {
            // FLOOR
            var floorTexture = new THREE.ImageUtils.loadTexture('@Url.Content("~/Content/images/grass.jpg")');
            floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;
            floorTexture.repeat.set(30, 30);
            var floorMaterial = new THREE.MeshBasicMaterial({ map: floorTexture, side: THREE.DoubleSide });
            var floorGeometry = new THREE.PlaneGeometry(100, 100, 10, 10);
            var floor = new THREE.Mesh(floorGeometry, floorMaterial);
            floor.position.y = 0;
            floor.rotation.x = Math.PI / 2;
            scene.add(floor);



            var imagePrefix ='@Url.Content("~/Content/alpes/")';
            var directions = ["xpos", "xneg", "ypos", "yneg", "zpos", "zneg"];
            var imageSuffix = ".jpg";
            var skyGeometry = new THREE.CubeGeometry(500, 500, 500);

            var materialArray = [];
            for (var i = 0; i < 6; i++)
                materialArray.push(new THREE.MeshBasicMaterial({
                    map: THREE.ImageUtils.loadTexture(imagePrefix + directions[i] + imageSuffix),
                    side: THREE.BackSide
                }));
            var skyMaterial = new THREE.MeshFaceMaterial(materialArray);
            var skyBox = new THREE.Mesh(skyGeometry, skyMaterial);

            scene.add(skyBox);
        }




        function drawHoles() {
            var holeRadius = 0.5;
            var playerBigCircleRadius = 12;
            var playerSmallCircleRadius = 7;
            var bigHalfCircleHolesAmount = 5;
            var smallHalfCircleHolesAmount = 5;


            var geometry = new THREE.CircleGeometry(holeRadius, 32);
            var material = new THREE.MeshBasicMaterial({ color: 0xA54200 });

            makeHoles(playerBigCircleRadius, bigHalfCircleHolesAmount, geometry, material, 0);

            var bigCircleAngle = Math.PI / bigHalfCircleHolesAmount;

            makeHoles(playerSmallCircleRadius, smallHalfCircleHolesAmount, geometry, material, bigCircleAngle / 2);

        }

        function makeHoles(circleRadius, halfHolesAmount, geometry, material, startAngle) {
            var bigCircleAngle = Math.PI / halfHolesAmount;

            halfHolesAmount *= 2;
            for (i = 0; i < halfHolesAmount; i++) {
                var currAngle = i * bigCircleAngle + startAngle;
                var newCoords = rotate(circleRadius, 0, currAngle);
                var circle = new THREE.Mesh(geometry, material);

                circle.rotation.x = -Math.PI / 2;
                circle.position.x = newCoords[0];
                circle.position.y = 0.001;
                circle.position.z = newCoords[1];
                scene.add(circle);

                var currHole = new Hole(circle, HolesArray.length + 1, circle.position.x, circle.position.z, 0.5);
                HolesArray.push(currHole);
            }

        }

        function rotate(x, y, angle) {

            var cos = Math.cos(angle),
                sin = Math.sin(angle),
                nx = (cos * (x)) + (sin * (y)),
                ny = (cos * (y)) - (sin * (x));
            return [nx, ny];
        }

        function animate() {

            var timeDifference = Math.floor( gameDuration - gameClock.getElapsedTime());
            if (timeDifference > 0) {
                document.getElementById('divTime').innerHTML = "TIME LEFT: " + timeDifference + " sec";
                requestAnimationFrame(animate);
                renderView();
                renderParticles();
                render();
            }
            else {
                document.getElementById('divTime').innerHTML = "TIME LEFT: 0 sec";
                document.getElementById('gameovertext').innerHTML = "GAME OVER </br>" + score;
                $("#gameoverlayer").show();
                if (score == 0) {
                    lostsound.play();
                }
                else {
                    wonsound.play();
                }
            }

        }


        function render() {
            renderer.render(scene, camera);
            controls.update();
        }



        function renderParticles() {
            var time = Date.now() * 0.01;

            for (k = 0; k < KilledMolesArray.length; k++) {
                if (KilledMolesArray[k].shown == true) {
                    var delta = KilledMolesArray[k].clock.getDelta();
                    KilledMolesArray[k].customUniforms.time.value += delta * 5;
                    KilledMolesArray[k].customUniforms.alpha.value -= 0.05;
                    if (KilledMolesArray[k].customUniforms.alpha.value <= 0) {
                        KilledMolesArray[k].shown = false;

                    }
                }

            }


            //Holes
            for (i = 0; i < HolesArray.length; i++) {
                if (HolesArray[i].clock.running == true) {
                    if (doingRequest == true) {
                        HolesArray[i].removeParticles();
                    }
                    else {
                        if (HolesArray[i].clock.getElapsedTime() > stayInSuperpositionSec) {
                            HolesArray[i].removeParticles();
                        }
                    }
                }

                if (HolesArray[i].superpos == true) {
                    var sizes = HolesArray[i].particlegeometry.attributes.size.array;
                    for (j = 0; j < particles; j++) {
                        sizes[j] = 2 * (1 + Math.sin(0.1 * j + time));
                    }
                    HolesArray[i].particlegeometry.attributes.size.needsUpdate = true;
                }
            }

        }


        function renderView() {
            camera.updateMatrix();
            camera.updateMatrixWorld();
            var frustum = new THREE.Frustum();
            frustum.setFromMatrix(new THREE.Matrix4().multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));

            // Your 3d point to check
            for (i = 0; i < HolesArray.length; i++) {
                var pos = new THREE.Vector3(HolesArray[i].x, 0, HolesArray[i].z);
                if (frustum.containsPoint(pos)) {
                    if (HolesArray[i].superpos == true) {
                        HolesArray[i].superpos = false;
                        if (MolesArray[i] != null) {
                            MolesArray[i].position.y = moleStartY;
                        }

                    }
                }
                else {
                    if (HolesArray[i].superpos == false) {
                        HolesArray[i].superpos = true;
                    }

                }

                if (HolesArray[i].showMole == true) {

                    if (HolesArray[i].moleGoesUp == true) {
                        MolesArray[i].position.y += moleSpeed;
                    }
                    else {
                        MolesArray[i].position.y -= moleSpeed;
                    }

                    if (HolesArray[i].moleGoesUp == true && MolesArray[i].position.y > 0) {
                        HolesArray[i].moleGoesUp = false;
                    }
                    else if (HolesArray[i].moleGoesUp == false && MolesArray[i].position.y < moleStartY) {
                        MolesArray[i].position.y = moleStartY;
                        HolesArray[i].showMole = false;
                        HolesArray[i].moleGoesUp = true;
                    }


                }

            }

        }

    </script>
</body>
</html>
